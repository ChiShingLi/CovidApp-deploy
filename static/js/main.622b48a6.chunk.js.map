{"version":3,"sources":["img/github.svg","components/Summary.js","components/MapChart.js","components/SummaryMap.js","components/SummaryBox.js","App.js","serviceWorker.js","components/TopNavbar.js","components/Footer.js","components/About.js","index.js"],"names":["module","exports","Summary","state","covidSummaryData","dataArray","this","props","data","map","key","Country","NewConfirmed","toLocaleString","TotalConfirmed","NewRecovered","NewDeaths","TotalDeaths","Date","toLocaleDateString","setState","Container","Card","Body","Table","striped","bordered","hover","size","style","color","Component","getStats","type","countryCode","SummaryData","covidData","filter","CountryCode","x","TotalRecovered","memo","setTooltipContent","console","log","data-tip","projectionConfig","scale","geography","geographies","geo","rsmKey","onMouseEnter","properties","NAME","ISO_A2","onMouseLeave","default","fill","outline","pressed","SummaryMap","useState","content","setContent","SummaryBox","summary","loadingData","fetch","then","response","json","className","padding","margin","textAlign","App","apiData","res","Countries","Boolean","window","location","hostname","match","TopNavbar","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","process","Footer","paddingBottom","src","githubLogo","width","About","ReactDOM","render","StrictMode","background","basename","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.622b48a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github.2977a212.svg\";","import React, { Component } from \"react\"\r\n\r\nimport { Card, Table, Container } from 'react-bootstrap';\r\n\r\nclass Summary extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            covidSummaryData: [\"Loading Data...\"]\r\n        }\r\n        //bind sortBy function, because of setState\r\n\r\n    }\r\n    componentDidMount() {\r\n        const dataArray = this.props.data.map(covidSummaryData => {\r\n            return (\r\n                <tr key={covidSummaryData.Country}>\r\n                    <td>{covidSummaryData.Country}</td>\r\n                    <td>{covidSummaryData.NewConfirmed.toLocaleString()}</td>\r\n                    <td>{covidSummaryData.TotalConfirmed.toLocaleString()}</td>\r\n                    <td>{covidSummaryData.NewRecovered.toLocaleString()}</td>\r\n                    <td>{covidSummaryData.NewDeaths.toLocaleString()}</td>\r\n                    <td>{covidSummaryData.TotalDeaths.toLocaleString()}</td>\r\n                    <td>{new Date(covidSummaryData.Date).toLocaleDateString()}</td>\r\n                </tr>\r\n            )\r\n        })\r\n        this.setState({\r\n            covidSummaryData: dataArray\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        //convert the props into array of elements\r\n        //format the date with Date()\r\n        // const dataArray = this.props.data.map(covidSummaryData => {\r\n        //     return (\r\n        //         <tr key={covidSummaryData.Country}>\r\n        //             <td>{covidSummaryData.Country}</td>\r\n        //             <td>{covidSummaryData.TotalConfirmed.toLocaleString()}</td>\r\n        //             <td>{covidSummaryData.NewRecovered.toLocaleString()}</td>\r\n        //             <td>{covidSummaryData.NewDeaths.toLocaleString()}</td>\r\n        //             <td>{covidSummaryData.TotalDeaths.toLocaleString()}</td>\r\n        //             <td>{new Date(covidSummaryData.Date).toLocaleDateString()}</td>\r\n        //         </tr>\r\n        //     )\r\n        // })\r\n        return (\r\n            <Container>\r\n                <h1>World COVID-19 Stats</h1>\r\n                <Card>\r\n                    <Card.Body>\r\n                        <Table striped bordered hover size=\"sm\" >\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Country</th>\r\n                                    <th style={{ color: \"#bf7171\" }}>New Confirmed</th>\r\n                                    <th style={{ color: \"#cfa534\" }}>Total Confirmed</th>\r\n                                    <th style={{ color: \"#56d143\" }}>New Recovered</th>\r\n                                    <th style={{ color: \"#eb2828\" }}>New Deaths</th>\r\n                                    <th style={{ color: \"#e32749\" }}>Total Deaths</th>\r\n                                    <th>Last Updated</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {/**display all the table data in the array */}\r\n                                {this.state.covidSummaryData}\r\n                            </tbody>\r\n                        </Table>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\nexport default Summary","import React, { memo } from \"react\";\r\nimport {\r\n  ZoomableGroup,\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography\r\n} from \"react-simple-maps\";\r\n\r\n//sample dataset\r\n//import SummaryData from \"../SummaryData\";\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\n\r\n//get stats by stat types and ISO2 Country codes\r\nfunction getStats(type, countryCode, SummaryData) {\r\n  let covidData = []\r\n  switch (type) {\r\n    case \"NewConfirmed\":\r\n      covidData = SummaryData.filter(data => data.CountryCode === countryCode)\r\n        .map(x => x.NewConfirmed)\r\n      return (covidData);\r\n\r\n    case \"TotalConfirmed\":\r\n      covidData = SummaryData.filter(data => data.CountryCode === countryCode)\r\n        .map(x => x.TotalConfirmed)\r\n      return (covidData);\r\n\r\n    case \"NewRecovered\":\r\n      covidData = SummaryData.filter(data => data.CountryCode === countryCode)\r\n        .map(x => x.NewRecovered)\r\n      return (covidData);\r\n\r\n    case \"TotalRecovered\":\r\n      covidData = SummaryData.filter(data => data.CountryCode === countryCode)\r\n        .map(x => x.TotalRecovered)\r\n      return (covidData);\r\n\r\n    case \"NewDeaths\":\r\n      covidData = SummaryData.filter(data => data.CountryCode === countryCode)\r\n        .map(x => x.NewDeaths)\r\n      return (covidData);\r\n\r\n    case \"TotalDeaths\":\r\n      covidData = SummaryData.filter(data => data.CountryCode === countryCode)\r\n        .map(x => x.TotalDeaths)\r\n      return (covidData);\r\n\r\n    case \"LastUpdated\":\r\n      covidData = SummaryData.filter(data => data.CountryCode === countryCode)\r\n        .map(x => x.Date)\r\n      return (new Date(covidData).toLocaleDateString());\r\n\r\n    default:\r\n      return \"N/A\"\r\n  }\r\n}\r\n\r\n\r\nconst MapChart = ({ setTooltipContent, data }) => {\r\n  return (\r\n    <>\r\n      {console.log(data)}\r\n      <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\r\n        <ZoomableGroup>\r\n          <Geographies geography={geoUrl}>\r\n            {({ geographies }) =>\r\n              geographies.map(geo => (\r\n                <Geography\r\n                  key={geo.rsmKey}\r\n                  geography={geo}\r\n                  onMouseEnter={() => {\r\n                    const { NAME, ISO_A2 } = geo.properties;\r\n                    //tooltips data, get stats by Country codes, data from the props passed down by parent (App.js)\r\n                    setTooltipContent(\r\n                      <div>\r\n                        <b>{NAME}</b>\r\n                        <br />\r\n                        New Confirmed: {getStats(\"NewConfirmed\", ISO_A2, data)}\r\n                        <br />\r\n                        Total Confirmed: {getStats(\"TotalRecovered\", ISO_A2, data)}\r\n                        <br />\r\n                        New Recovered: {getStats(\"NewRecovered\", ISO_A2, data)}\r\n                        <br />\r\n                        New Deaths: {getStats(\"NewDeaths\", ISO_A2, data)}\r\n                        <br />\r\n                        Total Deaths: {getStats(\"TotalDeaths\", ISO_A2, data)}\r\n                        <br />\r\n                        Last Updated: {getStats(\"LastUpdated\", ISO_A2, data)}\r\n                      </div>\r\n                    );\r\n                  }}\r\n                  onMouseLeave={() => {\r\n                    setTooltipContent(\"\");\r\n                  }}\r\n                  style={{\r\n                    default: {\r\n                      fill: \"#D6D6DA\",\r\n                      outline: \"none\"\r\n                    },\r\n                    hover: {\r\n                      fill: \"#F7615E\",\r\n                      outline: \"none\"\r\n                    },\r\n                    pressed: {\r\n                      fill: \"#E42\",\r\n                      outline: \"none\"\r\n                    }\r\n                  }}\r\n                />\r\n              ))\r\n            }\r\n          </Geographies>\r\n        </ZoomableGroup>\r\n      </ComposableMap>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(MapChart);\r\n","import React, { useState } from \"react\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport MapChart from \"./MapChart\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\n\r\nfunction SummaryMap(props) {\r\n    const [content, setContent] = useState(\"\");\r\n\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <MapChart setTooltipContent={setContent} data={props.data} />\r\n                <ReactTooltip>{content}</ReactTooltip>\r\n            </Container>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default SummaryMap","import React, { Component } from \"react\";\r\nimport { Container, Card } from \"react-bootstrap\";\r\n\r\nclass SummaryBox extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            summary: [\"Loading...\"],\r\n            loadingData: true\r\n        }\r\n    }\r\n    //get world total stats\r\n    componentDidMount() {\r\n        fetch(\"https://api.covid19api.com/world/total\")\r\n            .then(response => response.json())\r\n            .then(response => this.setState({\r\n                summary: response,\r\n                loadingData: false\r\n            }))\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <Container className=\"d-flex justify-content-center\">\r\n                    <Card className=\"bg-success text-white\" style={{ padding: 15, margin: 10 }}><b>Total Recovered</b> <span style={{ textAlign: \"center\" }}>{this.state.summary.TotalRecovered}</span></Card>\r\n                    <Card className=\"bg-info text-white\" style={{ padding: 15, margin: 10 }}><b>Total Confirmed</b> <span style={{ textAlign: \"center\" }}>{this.state.summary.TotalConfirmed}</span></Card>\r\n                    <Card className=\"bg-danger text-white\" style={{ padding: 15, margin: 10 }}><b>Total Deaths</b> <span style={{ textAlign: \"center\" }}>{this.state.summary.TotalDeaths}</span></Card>\r\n                </Container>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default SummaryBox","import React, { Component } from \"react\";\n\nimport Summary from \"./components/Summary\";\nimport SummaryMap from \"./components/SummaryMap\";\nimport SummaryBox from \"./components/SummaryBox\";\n\n//example dataset\n//import SummaryData from \"./SummaryData\";\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      loadingData: true,\n      apiData: []\n    }\n  }\n\n  //fetch the API data, when page loads\n  componentDidMount() {\n    fetch(\"https://api.covid19api.com/summary\")\n      .then(res => res.json()) //convert to JSON\n      .then(response => {\n        this.setState({\n          //store the data in the current state\n          apiData: response,\n          loadingData: false\n        })\n      })\n\n    //example data set\n    // this.setState({\n    //   apiData: SummaryData,\n    //   loadingData: false\n    // })\n  }\n  //API CALL\n  //        {this.state.loadingData ? <h1>Fetching Data</h1> : <Summary data={this.state.apiData.Countries} />}\n\n  //SAMPLE TEST\n  //        {this.state.loadingData ? <h1>Fetching Data</h1> : <Summary data={this.state.apiData} />}\n  render() {\n    return (\n      <div>\n        <SummaryMap data={this.state.apiData.Countries} />\n        <SummaryBox />\n        {this.state.loadingData ? <h1>Fetching Data...</h1> : <Summary data={this.state.apiData.Countries} />}\n      </div>\n    )\n  }\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\n\r\nfunction TopNavbar() {\r\n\r\n    return (\r\n        <div>\r\n            <Navbar bg=\"light\" expand=\"lg\">\r\n                <Navbar.Brand href=\"#\">CoVid-19 Stats</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link href={`${process.env.PUBLIC_URL}/`}>Home</Nav.Link>\r\n                        <Nav.Link href={`${process.env.PUBLIC_URL}/About`}>About</Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default TopNavbar","import React from \"react\";\r\n\r\nimport { Navbar } from \"react-bootstrap\";\r\nimport githubLogo from \"../img/github.svg\";\r\n\r\nfunction Footer() {\r\n    return (\r\n        <div className=\"fixed-bottom\">\r\n\r\n            <Navbar expand=\"lg\" bg=\"light\">\r\n                <div>Crafted with ❤ by Chi Li. - </div>\r\n                <div style={{ paddingBottom: 5 }}><a href=\"https://github.com/ChiShingLi/\">&nbsp;<img src={githubLogo} width={20}></img></a></div>\r\n            </Navbar>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Footer","import React from \"react\"\r\n\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nfunction About() {\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <h1>About</h1>\r\n                <h5> This React web app was created as an personal project.</h5>\r\n                Please Note: The data presented on this site might not be accurate or complete.\r\n                <br />\r\n                 *All the COVID data are gathered from (http://covid19api.com/) API.\r\n                 <br />\r\n            </Container>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default About","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport TopNavbar from \"./components/TopNavbar\";\nimport Footer from \"./components/Footer\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport About from \"./components/About\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div style={{ background: \"#F2F2F2\" }}>\n      <TopNavbar />\n      <Router basename={`${process.env.PUBLIC_URL}/`}>\n        <Route exact path=\"/\" component={App} />\n        <Route path=\"/About\" component={About}/>\n      </Router>\n      <Footer />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}