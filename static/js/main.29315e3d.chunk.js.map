{"version":3,"sources":["img/github.svg","components/Summary.js","components/MapChart.js","components/SummaryMap.js","components/SummaryBox.js","App.js","serviceWorker.js","components/TopNavbar.js","components/Footer.js","components/About.js","components/LineChart.js","components/Detail.js","index.js"],"names":["module","exports","Summary","state","covidSummaryData","searchCountry","bind","dataArray","this","props","data","map","key","Country","href","CountryCode","countryCode","svg","cdnUrl","cdnSuffix","title","NewConfirmed","toLocaleString","TotalConfirmed","NewRecovered","NewDeaths","TotalDeaths","Date","toLocaleDateString","setState","event","country","filter","item","toLowerCase","includes","target","value","toString","console","log","output","ResultItem","Container","Card","Body","InputGroup","size","className","FormControl","aria-label","placeholder","onChange","Table","striped","bordered","hover","style","color","Component","getStats","type","SummaryData","covidData","x","TotalRecovered","memo","setTooltipContent","data-tip","projectionConfig","scale","geography","geographies","geo","rsmKey","onMouseEnter","properties","NAME","ISO_A2","onMouseLeave","default","fill","outline","pressed","SummaryMap","useState","content","setContent","SummaryBox","summary","loadingData","fetch","then","response","json","padding","margin","fontSize","textAlign","App","apiData","res","Countries","Boolean","window","location","hostname","match","TopNavbar","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","id","Nav","Link","Footer","paddingBottom","src","githubLogo","width","About","LineChart","totalConfirmedData","totalRecoveredData","totalDeathsData","date","confirmed","recovered","totalDeaths","push","Confirmed","Recovered","Deaths","totalConfirmedChart","labels","datasets","label","lineTension","borderColor","pointBorderColor","pointBackgroundColor","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","totalRecoveredChart","totalDeathsChart","Tabs","defaultActiveKey","Tab","eventKey","Detail","params","ReactDOM","render","StrictMode","background","basename","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.29315e3d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github.2977a212.svg\";","import React, { Component } from \"react\"\r\nimport ReactCountryFlag from \"react-country-flag\";\r\nimport { Card, Table, Container, InputGroup, FormControl } from 'react-bootstrap';\r\n\r\nclass Summary extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            covidSummaryData: [\"Loading Data...\"]        \r\n        }\r\n        //bind sortBy function, because of setState\r\n        this.searchCountry = this.searchCountry.bind(this)\r\n    }\r\n    componentDidMount() {\r\n        const dataArray = this.props.data.map(covidSummaryData => {\r\n            return (\r\n                <tr key={covidSummaryData.Country}>\r\n                    <td><a href={`#/Detail/${covidSummaryData.CountryCode}`}>{covidSummaryData.Country} <ReactCountryFlag countryCode={covidSummaryData.CountryCode} svg cdnUrl=\"https://cdnjs.cloudflare.com/ajax/libs/flag-icon-css/3.4.3/flags/1x1/\" cdnSuffix=\"svg\" title={covidSummaryData.CountryCode}/></a></td>\r\n                    <td>{covidSummaryData.NewConfirmed.toLocaleString()}</td>\r\n                    <td>{covidSummaryData.TotalConfirmed.toLocaleString()}</td>\r\n                    <td>{covidSummaryData.NewRecovered.toLocaleString()}</td>\r\n                    <td>{covidSummaryData.NewDeaths.toLocaleString()}</td>\r\n                    <td>{covidSummaryData.TotalDeaths.toLocaleString()}</td>\r\n                    <td>{new Date(covidSummaryData.Date).toLocaleDateString()}</td>\r\n                </tr>\r\n            )\r\n        })\r\n        this.setState({\r\n            covidSummaryData: dataArray\r\n        })\r\n    }\r\n\r\n    searchCountry(event) {\r\n        //compare the data and input in lowercases\r\n        let country = this.props.data.filter(item => item.Country.toLowerCase().includes(event.target.value.toString().toLowerCase()))\r\n        console.log(country[0])\r\n\r\n        //output result on search term found\r\n        let output = country.map(ResultItem => {\r\n            return (\r\n                    <tr key={ResultItem.Country}>\r\n                        <td><a href={`#/Detail/${ResultItem.CountryCode}`}>{ResultItem.Country} <ReactCountryFlag countryCode={ResultItem.CountryCode} svg cdnUrl=\"https://cdnjs.cloudflare.com/ajax/libs/flag-icon-css/3.4.3/flags/1x1/\" cdnSuffix=\"svg\" title={ResultItem.CountryCode}/></a></td>\r\n                        <td>{ResultItem.NewConfirmed.toLocaleString()}</td>\r\n                        <td>{ResultItem.TotalConfirmed.toLocaleString()}</td>\r\n                        <td>{ResultItem.NewRecovered.toLocaleString()}</td>\r\n                        <td>{ResultItem.NewDeaths.toLocaleString()}</td>\r\n                        <td>{ResultItem.TotalDeaths.toLocaleString()}</td>\r\n                        <td>{new Date(ResultItem.Date).toLocaleDateString()}</td>\r\n                    </tr>\r\n            )\r\n        })\r\n        //update the table with the output result\r\n        this.setState({\r\n            covidSummaryData: output\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <h1>World COVID-19 Stats</h1>\r\n                <Card>\r\n                    <Card.Body>\r\n                        <InputGroup size=\"sm\" className=\"mb-3\">\r\n                            <FormControl aria-label=\"Large\" placeholder=\"Search Country Name...\" onChange={this.searchCountry} />\r\n                        </InputGroup>\r\n                        <Table striped bordered hover size=\"sm\" >\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Country</th>\r\n                                    <th style={{ color: \"#bf7171\" }}>New Confirmed</th>\r\n                                    <th style={{ color: \"#cfa534\" }}>Total Confirmed</th>\r\n                                    <th style={{ color: \"#56d143\" }}>New Recovered</th>\r\n                                    <th style={{ color: \"#eb2828\" }}>New Deaths</th>\r\n                                    <th style={{ color: \"#e32749\" }}>Total Deaths</th>\r\n                                    <th>Last Updated</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {/**display all the table data in the array */}\r\n                                {this.state.covidSummaryData}\r\n                            </tbody>\r\n                        </Table>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\nexport default Summary","import React, { memo } from \"react\";\r\nimport {\r\n  ZoomableGroup,\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography\r\n} from \"react-simple-maps\";\r\n\r\n//sample dataset\r\n//import SummaryData from \"../SummaryData\";\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\n//get stats by stat types and ISO2 Country codes\r\nfunction getStats(type, countryCode, SummaryData) {\r\n  let covidData = []\r\n  switch (type) {\r\n    case \"NewConfirmed\":\r\n      covidData = SummaryData.filter(data => data.CountryCode === countryCode)\r\n        .map(x => x.NewConfirmed)\r\n      return (covidData);\r\n\r\n    case \"TotalConfirmed\":\r\n      covidData = SummaryData.filter(data => data.CountryCode === countryCode)\r\n        .map(x => x.TotalConfirmed)\r\n      return (covidData);\r\n\r\n    case \"NewRecovered\":\r\n      covidData = SummaryData.filter(data => data.CountryCode === countryCode)\r\n        .map(x => x.NewRecovered)\r\n      return (covidData);\r\n\r\n    case \"TotalRecovered\":\r\n      covidData = SummaryData.filter(data => data.CountryCode === countryCode)\r\n        .map(x => x.TotalRecovered)\r\n      return (covidData);\r\n\r\n    case \"NewDeaths\":\r\n      covidData = SummaryData.filter(data => data.CountryCode === countryCode)\r\n        .map(x => x.NewDeaths)\r\n      return (covidData);\r\n\r\n    case \"TotalDeaths\":\r\n      covidData = SummaryData.filter(data => data.CountryCode === countryCode)\r\n        .map(x => x.TotalDeaths)\r\n      return (covidData);\r\n\r\n    case \"LastUpdated\":\r\n      covidData = SummaryData.filter(data => data.CountryCode === countryCode)\r\n        .map(x => x.Date)\r\n      return (new Date(covidData).toLocaleDateString());\r\n\r\n    default:\r\n      return \"N/A\"\r\n  }\r\n}\r\n\r\nconst MapChart = ({ setTooltipContent, data }) => {\r\n  return (\r\n    <>\r\n      {console.log(data)}\r\n      <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\r\n        <ZoomableGroup>\r\n          <Geographies geography={geoUrl}>\r\n            {({ geographies }) =>\r\n              geographies.map(geo => (\r\n                <Geography\r\n                  key={geo.rsmKey}\r\n                  geography={geo}\r\n                  onMouseEnter={() => {\r\n            const { NAME, ISO_A2 } = geo.properties;\r\n            //tooltips data, get stats by Country codes, data from the props passed down by parent (App.js)\r\n            setTooltipContent(\r\n              <div>\r\n                <b>{NAME}</b>\r\n                <br />\r\n                        New Confirmed: {getStats(\"NewConfirmed\", ISO_A2, data)}\r\n                <br />\r\n                        Total Confirmed: {getStats(\"TotalRecovered\", ISO_A2, data)}\r\n                <br />\r\n                        New Recovered: {getStats(\"NewRecovered\", ISO_A2, data)}\r\n                <br />\r\n                        New Deaths: {getStats(\"NewDeaths\", ISO_A2, data)}\r\n                <br />\r\n                        Total Deaths: {getStats(\"TotalDeaths\", ISO_A2, data)}\r\n                <br />\r\n                        Last Updated: {getStats(\"LastUpdated\", ISO_A2, data)}\r\n              </div>\r\n            );\r\n          }}\r\n                  onMouseLeave={() => {\r\n            setTooltipContent(\"\");\r\n          }}\r\n                  style={{\r\n            default: {\r\n              fill: \"#D6D6DA\",\r\n              outline: \"none\"\r\n            },\r\n            hover: {\r\n              fill: \"#F7615E\",\r\n              outline: \"none\"\r\n            },\r\n            pressed: {\r\n              fill: \"#E42\",\r\n              outline: \"none\"\r\n            }\r\n          }}\r\n                />\r\n              ))\r\n            }\r\n          </Geographies>\r\n        </ZoomableGroup>\r\n    </ComposableMap>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(MapChart);\r\n","import React, { useState } from \"react\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport MapChart from \"./MapChart\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\n\r\nfunction SummaryMap(props) {\r\n    const [content, setContent] = useState(\"\");\r\n\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <MapChart setTooltipContent={setContent} data={props.data} />\r\n                <ReactTooltip>{content}</ReactTooltip>\r\n            </Container>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default SummaryMap","import React, { Component } from \"react\";\r\nimport { Container, Card } from \"react-bootstrap\";\r\n\r\nclass SummaryBox extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            summary: [\"Loading...\"],\r\n            loadingData: true\r\n        }\r\n    }\r\n    //get world total stats\r\n    componentDidMount() {\r\n        fetch(\"https://api.covid19api.com/world/total\")\r\n            .then(response => response.json())\r\n            .then(response => this.setState({\r\n                summary: response,\r\n                loadingData: false\r\n            }))\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <Container className=\"d-flex justify-content-center\">\r\n                    <Card className=\"bg-success text-white\" style={{ padding: 15, margin: 1, fontSize: 25 }}><b>Total Recovered</b> <span style={{ textAlign: \"center\", fontSize: 50 }}>{this.state.summary.TotalRecovered != null ? this.state.summary.TotalRecovered.toLocaleString() : null}</span></Card>\r\n                    <Card className=\"bg-info text-white\" style={{ padding: 15, margin: 1, fontSize: 25 }}><b>Total Confirmed</b> <span style={{ textAlign: \"center\", fontSize: 50 }}>{this.state.summary.TotalConfirmed != null ? this.state.summary.TotalConfirmed.toLocaleString() : null}</span></Card>\r\n                    <Card className=\"bg-danger text-white\" style={{ padding: 15, margin: 1, fontSize: 25 }}><b>Total Deaths</b> <span style={{ textAlign: \"center\", fontSize: 50 }}>{this.state.summary.TotalDeaths != null ? this.state.summary.TotalDeaths.toLocaleString() : null}</span></Card>\r\n                </Container>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default SummaryBox","import React, { Component } from \"react\";\n\nimport Summary from \"./components/Summary\";\nimport SummaryMap from \"./components/SummaryMap\";\nimport SummaryBox from \"./components/SummaryBox\";\n\n//example dataset\n//import SummaryData from \"./SummaryData\";\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      loadingData: true,\n      apiData: []\n    }\n  }\n\n  //fetch the API data, when page loads\n  componentDidMount() {\n    fetch(\"https://api.covid19api.com/summary\")\n      .then(res => res.json()) //convert to JSON\n      .then(response => {\n        this.setState({\n          //store the data in the current state\n          apiData: response,\n          loadingData: false\n        })\n      })\n\n    //example data set\n    // this.setState({\n    //   apiData: SummaryData,\n    //   loadingData: false\n    // })\n  }\n  //API CALL\n  //        {this.state.loadingData ? <h1>Fetching Data</h1> : <Summary data={this.state.apiData.Countries} />}\n\n  //SAMPLE TEST\n  //        {this.state.loadingData ? <h1>Fetching Data</h1> : <Summary data={this.state.apiData} />}\n  render() {\n    return (\n      <div>\n        <SummaryMap data={this.state.apiData.Countries} />\n        <SummaryBox />\n        {this.state.loadingData ? <h1>Fetching Data...</h1> : <Summary data={this.state.apiData.Countries} />}\n      </div>\n    )\n  }\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\n\r\nfunction TopNavbar() {\r\n\r\n    return (\r\n        <div>\r\n            <Navbar bg=\"light\" expand=\"lg\">\r\n                <Navbar.Brand href=\"#\">CoVid-19 Stats</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"#/\">Home</Nav.Link>\r\n                        <Nav.Link href=\"#/About\">About</Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default TopNavbar","import React from \"react\";\r\n\r\nimport { Navbar } from \"react-bootstrap\";\r\nimport githubLogo from \"../img/github.svg\";\r\n\r\nfunction Footer() {\r\n    return (\r\n        <div className=\"fixed-bottom\">\r\n\r\n            <Navbar expand=\"lg\" bg=\"light\">\r\n                <div>Crafted with <span style={{ color: \"#e25555\" }}>&#9829;</span> by Chi Li. - </div>\r\n                <div style={{ paddingBottom: 5 }}><a href=\"https://github.com/ChiShingLi/\">&nbsp;<img src={githubLogo} width={20}></img></a></div>\r\n            </Navbar>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Footer","import React from \"react\"\r\n\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nfunction About() {\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <h1>About</h1>\r\n                <h5> This React web app was created as an personal project.</h5>\r\n                Please Note: The data presented on this site might not be accurate or complete.\r\n                <br />\r\n                 *All the COVID data are gathered from (http://covid19api.com/) API.\r\n                 <br />\r\n            </Container>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default About","import React, { Component } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { Tabs, Tab } from \"react-bootstrap\";\r\n\r\nclass LineChart extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            totalConfirmedData: [],\r\n            totalRecoveredData: [],\r\n            totalDeathsData: []\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        var date = [];\r\n        var confirmed = [];\r\n        var recovered = [];\r\n        var totalDeaths = [];\r\n\r\n        //extract the data from the api\r\n       this.props.data.map(item => {\r\n            date.push(new Date(item.Date).toLocaleDateString())\r\n            confirmed.push(item.Confirmed)\r\n            recovered.push(item.Recovered)\r\n            totalDeaths.push(item.Deaths)\r\n        })\r\n        \r\n        //chart datasets\r\n        const totalConfirmedChart = {\r\n            labels: date,\r\n            datasets: [\r\n                {\r\n                    label: 'Total Confirmed',\r\n                    fill: false,\r\n                    lineTension: 0.1,\r\n                    borderColor: '#3ccafa',\r\n                    pointBorderColor: '#3ccafa',\r\n                    pointBackgroundColor: '#3ccafa',\r\n                    pointHoverBackgroundColor: '#3ccafa',\r\n                    pointHoverBorderColor: '#3ccafa',\r\n                    pointHoverBorderWidth: 2,\r\n                    pointRadius: 1,\r\n                    pointHitRadius: 10,\r\n                    data: confirmed\r\n                },\r\n            ]\r\n        };\r\n\r\n        const totalRecoveredChart = {\r\n            labels: date,\r\n            datasets: [\r\n                {\r\n                    label: 'Total Recovered',\r\n                    fill: false,\r\n                    lineTension: 0.1,\r\n                    borderColor: '#0bb519',\r\n                    pointBorderColor: '#0bb519',\r\n                    pointBackgroundColor: '#0bb519',\r\n                    pointHoverBackgroundColor: '#0bb519',\r\n                    pointHoverBorderColor: '#0bb519',\r\n                    pointHoverBorderWidth: 2,\r\n                    pointRadius: 1,\r\n                    pointHitRadius: 10,\r\n                    data: recovered\r\n                },\r\n            ]\r\n        };\r\n        const totalDeathsChart = {\r\n            labels: date,\r\n            datasets: [\r\n                {\r\n                    label: 'Total Deaths',\r\n                    fill: false,\r\n                    lineTension: 0.1,\r\n                    borderColor: 'red',\r\n                    pointBorderColor: 'red',\r\n                    pointBackgroundColor: 'red',\r\n                    pointHoverBackgroundColor: 'red',\r\n                    pointHoverBorderColor: 'red',\r\n                    pointHoverBorderWidth: 2,\r\n                    pointRadius: 1,\r\n                    pointHitRadius: 10,\r\n                    data: totalDeaths\r\n                },\r\n            ]\r\n        };\r\n        this.setState({\r\n            totalConfirmedData: totalConfirmedChart,\r\n            totalRecoveredData: totalRecoveredChart,\r\n            totalDeathsData: totalDeathsChart\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Chart\">\r\n                <Tabs defaultActiveKey=\"totalConfirmed\">\r\n                    <Tab eventKey=\"totalConfirmed\" title=\"Total Confirmed\">\r\n                        <Line data={this.state.totalConfirmedData} />\r\n                    </Tab>\r\n                    <Tab eventKey=\"totalRecovered\" title=\"Total Recovered\">\r\n                        <Line data={this.state.totalRecoveredData} />\r\n                    </Tab>\r\n                    <Tab eventKey=\"totalDeaths\" title=\"Total Deaths\">\r\n                        <Line data={this.state.totalDeathsData} />\r\n                    </Tab>\r\n\r\n                </Tabs>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default LineChart","import React, { Component } from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport ReactCountryFlag from \"react-country-flag\";\r\nimport LineChart from \"./LineChart\";\r\n\r\n//Detail page with more detailed analytics about a country \r\nclass Detail extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            apiData: [],\r\n            loadingData: true\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        //get router params information\r\n        const { match: { params } } = this.props;\r\n\r\n        fetch(`https://api.covid19api.com/total/dayone/country/${params.id}`)\r\n            .then(res => res.json()) //convert to JSON\r\n            .then(response => {\r\n                this.setState({\r\n                    //store the data in the current state\r\n                    apiData: response,\r\n                    loadingData: false\r\n                })\r\n            })\r\n\r\n    }\r\n    \r\n    render() {\r\n        //get router params information\r\n        const { match: { params } } = this.props;\r\n        return (\r\n            <Container>\r\n                {this.state.loadingData ? \"loading data...\" : <h1>{this.state.apiData[0].Country} <ReactCountryFlag countryCode={params.id} svg cdnUrl=\"https://cdnjs.cloudflare.com/ajax/libs/flag-icon-css/3.4.3/flags/1x1/\" cdnSuffix=\"svg\" title={params.id}/></h1>}\r\n                {this.state.loadingData ? \"loading data...\" : <LineChart data={this.state.apiData} />}               \r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Detail","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport TopNavbar from \"./components/TopNavbar\";\nimport Footer from \"./components/Footer\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport About from \"./components/About\";\nimport Detail from \"./components/Detail\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div style={{ background: \"#F2F2F2\" }}>\n      <TopNavbar />\n      <HashRouter basename=\"/\">\n        <Route exact path=\"/\" component={App} />\n        <Route path=\"/About\" component={About} />\n        <Route path=\"/Detail/:id\" component={Detail} />\n      </HashRouter>\n      <Footer />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}